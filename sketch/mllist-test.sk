include "mllist.sk";

void length ()
{
  MLList<int> l = new MLList<int>(list = newArray());
  assert list_length(l) == 0;
}

void prepend ()
{
  MLList<int> l = list_empty();
  l = list_prepend(0, l);
  l = list_prepend(20, l);
  l = list_prepend(10, l);
  assert list_get(l, 0) == 10;
  assert list_get(l, 1) == 20;
  assert list_get(l, 2) == 0;
  assert list_length(l) == 3; 
}

void append ()
{
  MLList<int> l = list_empty();
  l = list_append(l, 0);
  l = list_append(l, 20);
  l = list_append(l, 10);
  assert list_get(l, 0) == 0;
  assert list_get(l, 1) == 20;
  assert list_get(l, 2) == 10;
  assert list_length(l) == 3; 
}

void get ()
{
  MLList<int> l = list_empty();
  l = list_append(l, 1);
  l = list_append(l, 2);
  assert list_get(l, 0) == 1;
  assert list_get(l, 1) == 2;
}

// empty is tested in others

void take ()
{
  MLList<int> l = list_empty();
  l = list_append(l, 0);
  l = list_append(l, 10);
  l = list_append(l, 20);
  l = list_append(l, 30);
  l = list_append(l, 40);
  
  MLList<int> l2 = list_take(l, 1);
  assert list_get(l2, 0) == 0;
  assert list_length(l2) == 1; 

  MLList<int> l3 = list_take(l, 3);
  assert list_get(l3, 1) == 10;
  assert list_length(l3) == 3;
}

void tail ()
{
  MLList<int> l = list_empty();
  l = list_append(l, 0);
  l = list_append(l, 10);
  l = list_append(l, 20);
  l = list_append(l, 30);
  l = list_append(l, 40);

  MLList<int> l2 = list_tail(l, 1);
  assert list_length(l2) == 4;
  assert list_get(l2, 0) == 10;

  MLList<int> l3 = list_tail(l, 3);
  assert list_length(l3) == 2;
  assert list_get(l3, 0) == 30;
  assert list_get(l3, 1) == 40;
}

void equal ()
{
  MLList<int> l1 = list_empty();
  l1 = list_append(l1, 0);
  l1 = list_append(l1, 10);
 
  MLList<int> l2 = list_empty();
  l2 = list_append(l2, 0);
  l2 = list_append(l2, 10);

  assert list_equal(l1, l2); 
}

void make ()
{
  MLList<int> l = make_MLList(2, {(int)0, (int)1});
  assert list_get(l, 0) == 0;
  assert list_get(l, 1) == 1;
}

void set ()
{
  MLList<int> l = make_MLList(2, {(int)0, (int)1});
  assert list_get(list_set(l, 0, 1), 0) == 1;
  assert list_get(list_set(l, 1, 0), 1) == 0;
}

harness void test ()
{
  length();
  prepend();
  append();
  get();
  take();
  tail();
  equal();
  make();
  set();
}
