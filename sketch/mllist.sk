include "/Users/akcheung/build/sketch-1.7.5/sketch-frontend/sketchlib/array.skh";

struct MLList<T> 
{ 
  Array<T> list; 
}

int list_length<T> (MLList<T> l)
{
  return l.list.sz;
}

MLList<T> list_prepend<T> (T val, MLList<T> l)
{
  int newSz = l.list.sz + 1; 
  MLList<T> n = new MLList<T>(list = new Array<T>(inner = new SArray<T>(n=newSz), sz=newSz)); 
  n.list.inner.val[0] = val;
  n.list.inner.val[1::(newSz-1)] = l.list.inner.val[0::(newSz-1)];
  
  //add(n.list, val);
  /*
  for (int i = 0; i < l.list.sz; ++i)
    add(n.list, l.list.inner.val[i]);
  */
  return n;
}

MLList<T> list_append<T> (MLList<T> l, T val)
{
  int newSz = l.list.sz + 1; 
  MLList<T> n = new MLList<T>(list = new Array<T>(inner = new SArray<T>(n=newSz), sz=newSz)); 
  n.list.inner.val[0::(newSz-1)] = l.list.inner.val[0::(newSz-1)];
  n.list.inner.val[(newSz-1)] = val;
  
  return n;
}

T list_get<T> (MLList<T> l, int i)
{
  assert i < l.list.sz;
  return l.list.inner.val[i];
}

MLList<T> list_empty<T> ()
{
  MLList<T> n = new MLList<T>(list = newArray());
  return n;
}

// take the first end elements
MLList<T> list_take<T> (MLList<T> l, int end)
{
  if (end >= l.list.sz)
    return l; 
  else if (end == 0)
    return list_empty();

  MLList<T> n = new MLList<T>(list = new Array<T>(inner = new SArray<T>(n=end), sz=end));
  n.list.inner.val[0::end] = l.list.inner.val[0::end];
  return n;
}

// extract list start from start
MLList<T> list_tail<T> (MLList<T> l, int start)
{
  if (start >= l.list.sz)
    return list_empty();
  else
  {
    int newSz = l.list.sz - start;
    MLList<T> n = new MLList<T>(list = new Array<T>(inner = new SArray<T>(n=newSz), sz=newSz)); 
    n.list.inner.val[0::newSz] = l.list.inner.val[start::newSz];
    return n;
  }
}

bit list_equal<T> (MLList<T> l1, MLList<T> l2)
{
  return l1.list.sz == l2.list.sz && l1.list.inner.val == l2.list.inner.val;
}

// for internal use only
MLList<T> make_MLList<T> (int n, T [n] vals)
{
  MLList<T> r = list_empty();
  for (int i = 0; i < n; ++i)
    r = list_append(r, vals[i]);

  return r;
}
